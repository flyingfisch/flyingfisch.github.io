<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Expositus</title>
    <description>My personal blog where I post about programming as well as other topics.
</description>
    <link>http://flyingfisch.github.io/</link>
    <atom:link href="http://flyingfisch.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 07 Aug 2015 23:08:30 -0400</pubDate>
    <lastBuildDate>Fri, 07 Aug 2015 23:08:30 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Don&#39;t Worry, Just Code</title>
        <description>&lt;p&gt;Use &lt;a href=&quot;http://lifehacker.com/this-graphic-helps-you-pick-your-first-programming-lang-1719213677&quot;&gt;this chart&lt;/a&gt; to decide your first programming language. Hey, come back! I was just making a point. Hello?&lt;/p&gt;

&lt;p&gt;For those of you who stayed, charts like this are just about the worst way to choose a programming language.&lt;/p&gt;

&lt;h1 id=&quot;my-saga&quot;&gt;My Saga&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;If you don’t want to read the long personal story of my relationship with programming, you can take the elevator &lt;a href=&quot;#Its-easy-to-learn-new-languages&quot;&gt;another floor down&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/fx9750gii.jpeg&quot; alt=&quot;Casio fx-9750GII&quot; /&gt;
&lt;figcaption&gt;The fx-9750GII&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is a Casio fx-9750GII, the device that first introduced me to programming. It was given to me on my 14th birthday and I was overjoyed. The first thing I did was start reading the manual from page one. After getting through the calculating and graphing sections, I came across a chapter I didn’t expect to see, labeled “Programming”. Well, right there I decided I was going to program the thing (there was no tutorial, just a syntax guide and documentation of the built-in functions). My first program ever was named &lt;code&gt;SQRT&lt;/code&gt;, and it looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?→A
Locate 1,1,√A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took user input, assigned it to &lt;code&gt;A&lt;/code&gt;, and then printed the square root of &lt;code&gt;A&lt;/code&gt; at position &lt;code&gt;1, 1&lt;/code&gt; on the screen. My next program printed “Yay I can code!” over and over and over again. As much as I hate to admit it, it used &lt;code&gt;goto&lt;/code&gt; instead of a &lt;code&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;Fast forward a couple months. I had learned from some friendly people on the &lt;a href=&quot;http://casiocalc.org/&quot;&gt;Universal Casio Forums&lt;/a&gt; that using &lt;code&gt;goto&lt;/code&gt; was usually a bad idea, and had started using loops and subroutines to organize my code. I had also begun to realize that Casio’s BASIC dialect was pretty slow for anything other than math. Since I wanted to program games for it, I started researching other ways to program calculators. After googling around a bit I learned that the hardware on my calculator was actually the same as the hardware on the fx-9860GII, which had an SDK for developing &lt;em&gt;addins&lt;/em&gt; for it in C. So I installed a third-party custom ROM with the addin feature flag set to true, and got to work learning C.&lt;/p&gt;

&lt;p&gt;There was a problem, though. Writing C for that calculator was hard. Most of the default libraries that online C tutorials referenced were not available or were named differently, and the documentation for the SDK was somewhat obscure. I ended up going back to good old BASIC and optimizing the programs I wrote to try to improve their speed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Lua-logo-nolabel.svg/128px-Lua-logo-nolabel.svg.png&quot; alt=&quot;Lua logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This wasn’t the end though, because a couple weeks later I came across a thread on a french calculator forum announcing development on a Lua port for the fx9860GII. I couldn’t wait for the first release, and probably pestered the developers much more than I should have (to the point where I am surprised they continued to put up with me), but it finally came.&lt;/p&gt;

&lt;p&gt;And then I dove into Lua. I wrote sh’mups. I made some obstacle dodging games. I wrote a couple libraries to help other developers who came my way. Life was good.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/prizm.jpeg&quot; alt=&quot;Casio fx-9750GII&quot; /&gt;
&lt;figcaption&gt;The Casio PRIZM&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Until Casio released the &lt;a href=&quot;http://www.casioeducation.com/prizm&quot;&gt;PRIZM&lt;/a&gt;. It had colors! I had to have one, but I knew no one would justify $99 on another calculator when the one I had was working just fine. And then it happened. Casio started a promotion where they gave away free PRIZM’s to people who finished their online training course. I took the course, and a week later my beautiful PRIZM was waiting for me in the mailbox. So I delved deep into the inner workings of the PRIZM, managing to brick three of them in two years before Casio got suspicious and stopped sending replacements (though I hadn’t voided my warranty).&lt;/p&gt;

&lt;p&gt;Around the same time one of my dad’s friends wanted a website built for his company and my dad asked if I wanted to try building one for him. I took that offer and spent two months learning HTML and CSS, as well as GIMP and Inkscape so I could make the background image. The website I made &lt;a href=&quot;https://web.archive.org/web/20120625182415/http://www.atgworldwide.us/&quot;&gt;looked somewhat crude&lt;/a&gt;, but  the my dad’s friend liked it and I was proud of it.&lt;/p&gt;

&lt;p&gt;I spent my free time in the next couple years experimenting with web programming, and hacking on my calculator, eventually starting &lt;a href=&quot;http://casio.clrhome.org/&quot;&gt;a blog&lt;/a&gt; to try to help other people learn to program their calculators as well. The experience with the blog got me into web development, and I ended up freelancing during my last two high school summers. I built a website in vanilla PHP for converting PNG images to sprites that calculators could understand and then uploading them to share, in the process learning about open source licenses, filetype validation, and basic hacking techniques like SQL injection. That experience led me to &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel&lt;/a&gt;, an excellent MVC framework written in PHP which allowed me to write much more organized and safe code.&lt;/p&gt;

&lt;p&gt;The summer following learning Laravel, I decided to challenge myself by learning Haskell, which I had heard would help me thing about coding problems in a different way. Boy, did it. It took me a long time to learn, not only because it is a completely different paradigm, but because I was my first real experience with a statically typed language since C.&lt;/p&gt;

&lt;p&gt;In the end I had a pretty satisfying sense of accomplishment, and I wondered if I had learned enough to be able to make it into the world of professional programmers. So I wrote up a resumé, took a look around, and applied for a couple of junior web developer positions, not really expecting anything to happen since I was less than a year out of high school, but a couple days later I started getting phone interviews, then face-to-face interviews, and ended up starting at &lt;a href=&quot;http://pantherpremium.com/&quot;&gt;Panther&lt;/a&gt; about a month later. This happened even though they develop exclusively in C# on the backend, and I was very open about the fact that I hadn’t touched the language at all.&lt;/p&gt;

&lt;p&gt;The fact of the matter was, I had enough general programming experience to build on that I didn’t need to know the language I was going to work in. It took me two weeks to get familiar enough with C# to start working on projects. Which makes a good segway for my next point.&lt;/p&gt;

&lt;h1 id=&quot;its-easy-to-learn-new-languages&quot;&gt;It’s easy to learn new languages.&lt;/h1&gt;

&lt;p&gt;Take a look at this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;if (a == 2) {
    print(&quot;hello world&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now have a look at this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (a == 2) {
    console.log(&quot;hello world&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this (getting a little trickier):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($a == 2) {
    print(&quot;hello world&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The point is, knowing one language makes learning another much easier. Even with Python’s different syntax, the &lt;code&gt;if&lt;/code&gt; statement still works the same way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if a == 2:
    print(&quot;hello world&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though the syntax has changed slightly and the curly brackets are gone, you still know what an &lt;code&gt;if&lt;/code&gt; statement is and when to use it. Programming is 90% thinking and 10% typing. Knowing what to express is more important than knowing how to express it.&lt;/p&gt;

&lt;p&gt;So Ruby developers make more, on average, than Python developers? Who cares? You can always switch later.&lt;/p&gt;

&lt;h1 id=&quot;one-language-programmers-considered-harmful&quot;&gt;One-language programmers considered harmful&lt;/h1&gt;

&lt;figure&gt;
&lt;img src=&quot;https://i.imgflip.com/p8zfl.jpg&quot; alt=&quot;One does not simply learn one language only.&quot; /&gt;
&lt;figcaption&gt;Boromir even knows!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;(Yes, I know, &lt;a href=&quot;http://meyerweb.com/eric/comment/chech.html&quot;&gt;it’s cliché&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;You can’t know the shortcomings of a language unless you experience them yourself. Regardless of how much you may think you know that PHP “doesn’t scale”, without attempting to use it for a large project you will never truly understand what that means. Conversly, unless you have experienced the shortcomings of vanilla PHP, you won’t truly appreciate the added perceived complexity of an MVC framework like Django.&lt;/p&gt;

&lt;p&gt;When starting out in programming, you can’t know what you don’t know. A man who has lived his entire life in a totalitarian state without ever hearing of freedom doesn’t understand why he would want it. Likewise, someone who has never experienced functional programming would never know why or when to use &lt;code&gt;map&lt;/code&gt; in Python or pass functions as arguments in C#.&lt;/p&gt;

&lt;h1 id=&quot;skill-is-directly-proportional-to-salary&quot;&gt;Skill is directly proportional to salary&lt;/h1&gt;

&lt;p&gt;The idea that the language you code in is a major factor in the amount of money you make is also somewhat absurd. The first problem is that those are average salaries – a great PHP developer can make more at Facebook than a Python developer is going to make writing one-off scripts at a small business (not a far-fetched example either, I have a coworker who did just that before switching to C#).&lt;/p&gt;

&lt;p&gt;The application you write code for is actually more related to your salary than the language you are coding in. Writing guidance systems C or Ada for NASA, or fly-by-wire systems in FORTRAN for General Dynamics is going to be a higher paying job than designing websites for small companies in Ruby on Rails. That said, your expertise may be in animations and interface design instead of the more technical side of programming. This is absolutely fine. Persue what you enjoy, not just what seems more lucrative.&lt;/p&gt;

&lt;h1 id=&quot;no-one-remembers-you-for-your-code&quot;&gt;No one remembers you for your code&lt;/h1&gt;

&lt;p&gt;One last point before wrapping up (promise!): no one is going to remember you for the language you programmed in. What they will remember is the products you build. No one is going to remember Mark Zuckerberg because he was a PHP whiz, they’ll remember him because he built Facebook. No one remembers Linus Torvalds for his C, they remember him for Linux.&lt;/p&gt;

&lt;blockquote class=&quot;pull-quote&quot;&gt;
Don&#39;t worry about languages, go build awesome stuff!
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 04 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/culture/programming/2015/08/04/dont-worry-just-build.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/culture/programming/2015/08/04/dont-worry-just-build.html</guid>
        
        
        <category>culture</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>A Week in Quotes</title>
        <description>&lt;p&gt;This past week I have been making one &lt;a href=&quot;http://codepen.io/collection/ANqEdj/&quot;&gt;codepen a day&lt;/a&gt; featuring an interesting quote. Here is an example.&lt;/p&gt;

&lt;p data-height=&quot;391&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;XbOmwQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/XbOmwQ/&quot;&gt;Quote of the Day - Day 6 (Antoine de Saint-Exupery)&lt;/a&gt; by Mark Fischer, Jr (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The most challenging part, and the part that spawned the whole thing, were the lines on each side of the quotation marks. The first thing you have to do is make the line. This is easy enough, we just add &lt;code&gt;border-bottom&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;blockquote {
    &amp;amp;::before {
        border-bottom: 3px solid #000;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need that line to go behind our &lt;code&gt;::before&lt;/code&gt; element. We can do this by making the height of the element half of the height of the letters, the best way to do that is with &lt;code&gt;0.5em&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;blockquote {
    &amp;amp;::before {
        border-bottom: 3px solid #000;
        height: 0.5em
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now comes the tricky part. How do we get the line to only show on either side of the element? One way would be to give the element a background color that matches the parent background color. Unfortunately, this only works when we have a solid background color. Since we want images behind it, we need another method. The one I came up with was using a gradient, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;blockquote {
    &amp;amp;::before {
        border-bottom: 3px solid #000;
        border-image: linear-gradient(to right, #555 0, #555 47%, transparent 47%, transparent 53%, #555 53%, #555 100%);
        height: 0.5em
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is not the finished code, I am only showing the interesting properties. If you want code you can copy and paste, check out the source code &lt;a href=&quot;http://codepen.io/flyingfisch/pen/XbOmwQ?editors=010&quot;&gt;on the pen itself&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/project/2015/08/04/a-week-in-quotes.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/project/2015/08/04/a-week-in-quotes.html</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Building a Modern Website: Part 2</title>
        <description>&lt;p&gt;This is the third of a &lt;a href=&quot;/modern-website-series/&quot;&gt;3-post series&lt;/a&gt; on building a modern website (if you don’t understand the post title, this may help you: the series started with Part 0. &lt;a href=&quot;http://stackoverflow.com/questions/2785704/why-do-lua-arraystables-start-at-1-instead-of-0&quot;&gt;Lua developers are excused&lt;/a&gt; for not getting the significance.). The demo website is a fictional sailing club’s homepage. This post will go over the footer and finishing touches. This is what the site looked like at the end of the last post:&lt;/p&gt;

&lt;p data-height=&quot;424&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;GJEWMR&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/GJEWMR/&quot;&gt;GJEWMR&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;footer&quot;&gt;Footer&lt;/h1&gt;

&lt;p&gt;Before we get to the CSS, let’s stick a little markup in the footer like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;footer&amp;gt;
    &amp;amp;copy; 2015 R. S. Sailing Club
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, with that out of the way we can start styling. Let’s start by giving it a background color (remember that we set variables for the color values at the top of the stylesheet):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;footer {
    background-color: $light-secondary;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s throw some padding on it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;padding: 2em;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then make the font a little larger and centered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;font-size: 1.2em;
text-align: center;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for the footer, now let’s do some quick mobile optimizations and wrap this project up.&lt;/p&gt;

&lt;h1 id=&quot;mobile&quot;&gt;Mobile&lt;/h1&gt;

&lt;p&gt;The first thing we can do is make the navigation go below the logo on mobile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    @media (max-width: 630px) {
        nav {
            display: block;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next let’s make the feature section come all the way to the edges of the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;article {
    .feature {
        padding: 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h1 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h1&gt;

&lt;p&gt;That finishes this tutorial series, but there is still plenty left to do. For instance, we haven’t covered image styling or captions, and the footer is pretty empty. Maybe a background image behind the feature section would be a good idea, it’s up to you.&lt;/p&gt;

&lt;p data-height=&quot;378&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;yNzQwd&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/yNzQwd/&quot;&gt;yNzQwd&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Feel free to fork the pen and make it your own!&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/26/building-a-modern-website-part-2.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/26/building-a-modern-website-part-2.html</guid>
        
        
        <category>frontend</category>
        
        <category>design</category>
        
        <category>tutorial</category>
        
        <category>modern-website-series</category>
        
      </item>
    
      <item>
        <title>Building a Modern Website: Part 1</title>
        <description>&lt;p&gt;This is the second of a &lt;a href=&quot;/modern-website-series/&quot;&gt;3-post series&lt;/a&gt; on building a modern website. The demo website is a fictional sailing club’s homepage. This post covers the navigation bar and body text. The last part will go over the footer and finishing touches. This is what the site looked like at the end of the last post:&lt;/p&gt;

&lt;p data-height=&quot;150&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;eNdaoe&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/eNdaoe/&quot;&gt;eNdaoe&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;navigation&quot;&gt;Navigation&lt;/h1&gt;

&lt;p&gt;The way we are going to do the navigation bar is putting the links in an unordered list, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Join&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;aside&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;At the time of writing I forgot, but the &lt;code&gt;ul&lt;/code&gt; element should be within a &lt;code&gt;nav&lt;/code&gt; to make it more semantic, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
         &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/aside&gt;

&lt;p&gt;Now we have to style it. The first thing we’ll do is get rid of the bullets, margin and the padding.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    ul {
        list-style: none;
        margin: 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm, those list items look kind of weird. Let’s line them up horizontally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    ul {
        display: inline-block;
        margin-left: 1em; // separate them a little
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, those links are lined up now, but they are hard to read on the blue, so let’s style them up a little.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    a {
        color: $light;
        font-family: $font-header;
        text-decoration: none;
        text-transform: uppercase;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then let’s get them to show up on the same line as the club name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    h1 {
        float: left;
    }

    ul {
        float: right;
        line-height: 80px; // centers the ul in the header. The trick is if you only need to center a single line of text you can do it by setting line-height to the height of the container
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;body-copy&quot;&gt;Body copy&lt;/h1&gt;

&lt;p&gt;Now let’s make some HTML for our page. We know we are going to have a header and some text, so let’s add that (&lt;a href=&quot;https://en.wikipedia.org/wiki/Greeking&quot;&gt;greeking&lt;/a&gt; was generated by &lt;a href=&quot;http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html&quot;&gt;Tolkien Ipsum&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;The Men Escape to the Crack of Doom&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;The Man women and children hurried to The Crack of Doom for shelter. In the meantime, Aragorn insisted on attacking The mines of Moria, but the Orcs were waiting. Morgoth felt he did not have the strength to attack. The Hobbits were ravaging the countryside, leaving destruction in their wake. &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Gandalf led the Ents to attack Weathertop, but the attack failed. Farmer Maggot felt he did not have the strength to build. 6 axe were smashed. Faramir insisted on attacking Hobbiton, but the Elves were waiting. &quot;Quick!&quot;, cried Grima Wormtongue, &quot;Dwarves!&quot; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;The Men were ravaging the countryside, leaving destruction in their wake. Eowyn attacked Weathertop, and slaughtered the Orcs in a surprise attack. Sam attacked The mines of Moria, and slaughtered the Hobbits in a surprise attack. The Elves ambushed Boromir at Bree. Meanwhile, The attack failed, forcing the Dwarves to retreat to Bree. &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to style this stuff! The first thing I am going to do is make &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;h2&lt;/code&gt; small-caps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1, h2 {
    font-varient: small-caps;
    font-weight: normal;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks nice, except the letters all touch the left hand side of the screen, making them hard to read. I’m going to add some padding to the article element to fix that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;article {
    padding: 1em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed in the mockup that the first paragraph and header were set off from the rest of the text. We can do this by sticking that text inside a &lt;code&gt;section&lt;/code&gt; with class &lt;code&gt;feature&lt;/code&gt; and styling it up like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;article {
    .feature {
        font-size: 1.2em;
        margin-bottom: 2em;
        padding-left: 20%;
        padding-right: 20%;
        text-align: center;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Here is the website so far, with code and everything. Feel free to fork it on CodePen:&lt;/p&gt;

&lt;p data-height=&quot;424&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;GJEWMR&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/GJEWMR/&quot;&gt;GJEWMR&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That concludes this part of the series. In the next and final part I will build the footer, do some mobile optimizations, and put on the finishing touches. Stay tuned!&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/10/building-a-modern-website-part-1.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/10/building-a-modern-website-part-1.html</guid>
        
        
        <category>frontend</category>
        
        <category>design</category>
        
        <category>tutorial</category>
        
        <category>modern-website-series</category>
        
      </item>
    
      <item>
        <title>Announcing Tolkien Ipsum</title>
        <description>&lt;p&gt;I built a little website that generates Lord of the Rings themed Lorem Ipsum. You can &lt;a href=&quot;http://tolkienipsum.cloudapp.net/&quot;&gt;check it out live&lt;/a&gt; or view the source on &lt;a href=&quot;https://github.com/flyingfisch/tolkienIpsum&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;for-geeks&quot;&gt;For Geeks&lt;/h1&gt;

&lt;p&gt;I am hosting the site on a &lt;a href=&quot;http://azure.microsoft.com/&quot;&gt;Microsoft Azure&lt;/a&gt; Ubuntu 14.04 virtual machine. The setup process for serving Django was pretty straightforward, I just adapted the excellent &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&quot;&gt;Digital Ocean tutorial&lt;/a&gt; to my needs. The project does use python3, so if you are planning on hosting it yourself you’ll want to keep that in mind.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html</guid>
        
        
        <category>announcement</category>
        
      </item>
    
      <item>
        <title>Building a Modern Website: Part 0</title>
        <description>&lt;p&gt;This is the first of a &lt;a href=&quot;/modern-website-series/&quot;&gt;3-post series&lt;/a&gt; series on building a modern website. The demo website is a fictional sailing club’s homepage. This post covers the mockup process and building the header. The next part will go into the navigation bar and body text.&lt;/p&gt;

&lt;h1 id=&quot;layout&quot;&gt;Layout&lt;/h1&gt;

&lt;p&gt;The first thing I do when building a website is come up with a layout. For this site I thought we would keep the layout fairly minimal. I don’t generally build wireframes, preferring building in the browser instead, but I whipped one up in this case to let you see what kind of layout I am envisioning.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-wireframe.svg&quot; alt=&quot;Wireframe for desktop layout&quot; /&gt;
&lt;figcaption&gt;Wireframe for desktop layout.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since this is going to be responsive, we need to have a mobile layout as well.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-wireframe-mobile.svg&quot; alt=&quot;Wireframe for mobile layout&quot; /&gt;
&lt;figcaption&gt;Wireframe for mobile layout.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;colors&quot;&gt;Colors&lt;/h1&gt;

&lt;p&gt;The colors for this site are going to be blue and white. I got the exact shades straight from the &lt;a href=&quot;http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette&quot;&gt;Tango project’s color palette&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-palette.svg&quot; alt=&quot;Palette colors: #ffffff, #eeeeec, #3465a4, #204a87&quot; /&gt;
&lt;figcaption&gt;Colors: #ffffff, #eeeeec, #3465a4, #204a87&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;fonts&quot;&gt;Fonts&lt;/h1&gt;

&lt;p&gt;The first thing I like to do before actually designing the site is find a font to use. For this project I just ran over to &lt;a href=&quot;https://www.google.com/fonts/&quot;&gt;Google Fonts&lt;/a&gt; and chose Montserrat for the headers and Alegreya for the copy. As a rule of thumb it is usually good to choose a serif font for your body text if the headers are sans-serif, and vice versa.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;link&lt;/code&gt; tag for the fonts, we’re just going to add it into the header. Although there are other methods of using Google Fonts, the &lt;code&gt;link&lt;/code&gt; tag has the best browser support.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;link href=&quot;http://fonts.googleapis.com/css?family=Montserrat:400,700|Alegreya:400,400italic,700,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also be using &lt;a href=&quot;https://necolas.github.io/normalize.css/&quot;&gt;Normalize.css&lt;/a&gt; which basically gives you a starting point that looks the same across all browsers. Since we want to override it’s styles with ours we put it’s link tag first. Our &lt;code&gt;head&lt;/code&gt; tag should look something like this now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;R. S. Sailing Club&amp;lt;/title&amp;gt;

    &amp;lt;link href=&quot;http://fonts.googleapis.com/css?family=Montserrat:400,700|Alegreya:400,400italic,700,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
    &amp;lt;link href=&quot;/css/normalize.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
    &amp;lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to be using &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; for the stylesheets, but don’t worry, I’ll explain any nuances we come across in the project. For now, just think of it as CSS with extra features. Here is our stylesheet so far:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html, body {
    width: 100%;
    height: 100%;
}

body * {
    box-sizing: border-box;
}

body {
    font-family: &#39;Alegreya&#39;, serif;
    font-size: 16px;
}

h1, h2, h3, h4, h5, h6 {
    font-family: &#39;Montserrat&#39;, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;designing-the-header&quot;&gt;Designing the header&lt;/h1&gt;

&lt;p&gt;Now that the fonts have been selected, we can start on the header. The markup for now is pretty simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;R. S. Sailing Club&amp;lt;/h1&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s get into the CSS. We want the background of the header to be dark blue, and the font should be white. Here is the site so far:&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;eNdaoe&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/eNdaoe/&quot;&gt;eNdaoe&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;sass-101&quot;&gt;SASS 101&lt;/h1&gt;

&lt;p&gt;This is probably a good time to go over a couple important SASS features: variables and nested selectors.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Variables names start with a &lt;code&gt;$&lt;/code&gt;, and can contain any information you can put in a property. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$my-border: 2px solid black;

div {
    border: $my-border;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That compiles to this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div {
    border: 2px solid black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;nested-selectors&quot;&gt;Nested Selectors&lt;/h1&gt;

&lt;p&gt;If you want to select an element inside another element, you can nest the selectors. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    h1 {
        color: #fff;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;header h1 {
    color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;&amp;amp;&lt;/code&gt; to select the parent element, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;a {
    color #000;
    text-decoration: none;

    &amp;amp;:hover {
        text-decoration: underline;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which compiles into this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;a {
    color: #000;
    text-decoration: none;
}
a:hover {
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 25 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/05/25/building-a-modern-website-part-0.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/05/25/building-a-modern-website-part-0.html</guid>
        
        
        <category>frontend</category>
        
        <category>design</category>
        
        <category>tutorial</category>
        
        <category>modern-website-series</category>
        
      </item>
    
      <item>
        <title>Using REST Inside Programs</title>
        <description>&lt;p&gt;Rich Hickey proposed an interesting idea in his &lt;a href=&quot;https://www.youtube.com/watch?v=rI8tNMsozo0&quot;&gt;keynote at RailsConf 2012&lt;/a&gt;.
The idea, if I understand correctly, is that if serialization is good between
servers as a way to separate concerns, then why don’t we do it between different
sections of code on the same server?&lt;/p&gt;

&lt;p&gt;Using REST between different code blocks seems like a good idea, but serialization seems a bit useless
in my humble opinion, since it only seems to add complexity to the program.&lt;/p&gt;

&lt;p&gt;I decided to write a little &lt;a href=&quot;https://github.com/flyingfisch/python-rest-poc/commits?author=flyingfisch&quot;&gt;proof-of-concept&lt;/a&gt; for this program in Python.
There is a module &lt;code&gt;rest.py&lt;/code&gt; which currently contains one class: &lt;code&gt;CRUD&lt;/code&gt;. &lt;code&gt;CRUD&lt;/code&gt;
has four built-in functions: &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the documentation for each of the built-in functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;create(object)
&quot;&quot;&quot;
Creates a new object.

Keyword arguments:
object -- Object or list of objects to create
&quot;&quot;&quot;

read()
&quot;&quot;&quot;Returns a list of created objects.&quot;&quot;&quot;

update(objectId, object)
&quot;&quot;&quot;
Updates object.

Keyword arguments:
objectId -- Key of object to update
object -- Object to update with
&quot;&quot;&quot;

delete(objectId)
&quot;&quot;&quot;
Deletes object from list.

Keyword arguments:
objectId -- Key of object to delete
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in commands operate on an internal list &lt;code&gt;_objects&lt;/code&gt;, accessible through
&lt;code&gt;read()&lt;/code&gt;. Here is a simple example using the default methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from rest import CRUD

# A dictionary entry class
class DictEntry:
    Word = &quot;&quot;
    Definition = &quot;&quot;

    def __init__(self, word, definition):
        self.Word = word
        self.Definition = definition

    def __repr__(self):
        return &quot;(Word: {0}, Definition: {1})&quot;.format(self.Word, self.Definition)

# Make a CRUD instance
Dictionary = CRUD()

# Add a word to our dictionary
Dictionary.create(DictEntry(&quot;Programmer&quot;, &quot;A being that converts pizza and Coke into crde&quot;))

# Update the word
Dictionary.Update(0, DictEntry(&quot;Programmer&quot;, &quot;A being that converts pizza and Coke into code&quot;)

# Print the dictionary out to the terminal
print(Dictionary.read())

# Delete the word
Dictionary.Delete(0)

# Print the (empty) dictionary out to the terminal
print(Dictionary.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure how useful this is going to be, but it was fun to code up!&lt;/p&gt;

</description>
        <pubDate>Sun, 17 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/programming/web/2015/05/17/using-rest-internally.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/programming/web/2015/05/17/using-rest-internally.html</guid>
        
        
        <category>programming</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Pseudo-Element Kung-Fu</title>
        <description>&lt;p&gt;I recently found that the &lt;code&gt;content&lt;/code&gt; property can contain cooler stuff than just
strings. For instance, you can show the &lt;code&gt;href&lt;/code&gt; of a link in a cool popup with
absolutely no JS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;content: attr(href);
&lt;/code&gt;&lt;/pre&gt;

&lt;p data-height=&quot;378&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;YXypBV&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/YXypBV/&quot;&gt;Pure CSS link hover popup&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This allows us to show popups without JS as well, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;span class=&quot;popup&quot; data-popuptext=&quot;This is a CSS-only popup!&quot;&amp;gt;Hover!&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;span.popup:hover:after {
    content: attr(data-popuptext);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course a live demo with the full source:&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;oXbBXz&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/oXbBXz/&quot;&gt;Pure CSS hover popup&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s all I’ve got, have fun messing around with &lt;code&gt;content&lt;/code&gt;!&lt;/p&gt;

</description>
        <pubDate>Fri, 08 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/css/programming/web/2015/05/08/css-pseudo-elements-kung-fu.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/css/programming/web/2015/05/08/css-pseudo-elements-kung-fu.html</guid>
        
        
        <category>css</category>
        
        <category>programming</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/laptop.jpg&quot; alt=&quot;laptop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Welcome to my blog. I am a frontend .NET web developer (mainly ASP.net MVC with C#).
At home I use Linux exclusively and code in Python, Haskell, PHP (with the excellent
&lt;a href=&quot;http://laravel.org/&quot;&gt;Laravel&lt;/a&gt; framework), or any other language that fits the bill.&lt;/p&gt;

&lt;p&gt;I plan to post about programming mainly, but I may also post on other topics as well.
Stay tuned – or don’t (I won’t hate you).&lt;/p&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;

&lt;p&gt;“Expositus” is Latin for “open” and “accessible”.&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Apr 2015 14:44:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/announcement/2015/04/25/welcome.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/announcement/2015/04/25/welcome.html</guid>
        
        
        <category>announcement</category>
        
      </item>
    
  </channel>
</rss>
