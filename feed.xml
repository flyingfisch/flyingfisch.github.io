<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Expositus</title>
    <description>My personal blog where I post about programming as well as other topics.
</description>
    <link>http://markfischerjr.com//</link>
    <atom:link href="http://markfischerjr.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 15 Jan 2019 13:59:22 +0000</pubDate>
    <lastBuildDate>Tue, 15 Jan 2019 13:59:22 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>test</title>
        <description>
</description>
        <pubDate>Tue, 15 Jan 2019 05:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//2019/01/15/test.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//2019/01/15/test.html</guid>
        
        
      </item>
    
      <item>
        <title>Grocery stores are broken</title>
        <description>&lt;p&gt;Imagine walking into a new grocery store. What are the first things you notice? Maybe it’s the dim fluorescent lights. Maybe it’s the &lt;a href=&quot;https://youtu.be/wbQSAdU4Qb4?t=40s&quot;&gt;sound of&lt;/a&gt; low quality &lt;a href=&quot;https://youtu.be/wbQSAdU4Qb4?t=40s&quot;&gt;music&lt;/a&gt; on a lower quality speaker, quiet enough that you can’t tell what’s playing, loud enough that you can’t ignore it.&lt;/p&gt;

&lt;p&gt;As you walk further into the store you feel increasingly trapped. It’s not the immediate panic of claustrophobia, but a dull anxiety that makes you wish you were somewhere else. Shelves obscure your vision past a few feet. Even if you happen to be near a window, you can’t see out because it’s plastered in advertisements.&lt;/p&gt;

&lt;p&gt;At this point you just want to get what you need and leave as quickly as possible. Unfortunately this is impossible since without previous knowledge of the store’s categorization system and layout, the only way to find anything is by making an educated guess based on the aisle signs. Signs that &lt;em&gt;lie.&lt;/em&gt; Are you looking for ketchup? Maybe it’s with the “Tomato Products”, or possibly with the hot dog buns. Actually, it’s on the end cap of aisle 7.&lt;/p&gt;

&lt;p&gt;You finally have your items and it’s time to check out. There are huge lines at the human-operated registers so you decide to use the self-checkout machine. You scan your first item and fumble to open the bag in the bagging area. A disembodied voice tells you to “please place item in bagging area”. After finally getting the bag open you place said item in the bagging area, only to be reproached with “unexpected item in bagging area”. You just can’t win with this woman! Embarrassed, you call the clerk overseeing the self-checkout machines and ask her to reset it. She punches in a code and the machine accepts your item. You scan some more items, filling up the bag. Oh &lt;em&gt;no&lt;/em&gt;! You have to open another bag. Time to fight with the machine again. This whole experience makes you feel like you were accused of stealing before you even scanned your first item.&lt;/p&gt;

&lt;p&gt;I could write a whole blog post on the botheration that is self-checkout machine user interfaces, but this post is intended to capture the broad experience of shopping at a grocery store, not the experiences within that experience that make it even more aggravating.&lt;/p&gt;

&lt;p&gt;The grocery store shopping experience is broken, and the worst part about it is that &lt;em&gt;people think this is okay&lt;/em&gt;. This is not okay! Here are some things I’ve been thinking about that could improve the grocery shopping experience:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Grocery stores should have ceiling-to-floor windows wherever possible. These windows &lt;em&gt;should not&lt;/em&gt; be covered with any advertisements whatsoever.&lt;/li&gt;
  &lt;li&gt;Shelves should be 5 feet or shorter. There is no point in having large windows if you can’t see them from most parts of the store.&lt;/li&gt;
  &lt;li&gt;Refrigerators should be in the center of the store, and should be chest-style refrigerators. This allows you to see over them and also frees up wall space for more windows.&lt;/li&gt;
  &lt;li&gt;More items should be unavailable in the main store area. It’s common for deli meats and baked goods to be sold in this manner, but I think this should be the case for all fresh food. This prevents customers from damaging items while looking for the “freshest” food.&lt;/li&gt;
  &lt;li&gt;The browsable section of the store should be categorized using a decimal system similar to the Dewey Decimal System in use by libraries. This allows customers unfamiliar with the store to find items quickly without having to navigate the entire store or ask a clerk for assistance.&lt;/li&gt;
  &lt;li&gt;Abolish end caps. I don’t care if the statistically increase revenue, they make the store harder to navigate. I believe that an overall consumer-friendly atmosphere will increase revenue much more than micro-optimizing a consumer-hostile environment.&lt;/li&gt;
  &lt;li&gt;Self-checkout machines need to be fixed. I think the only reason we still have human cashiers at grocery stores is because the self-checkout experience is so exasperating. Again, this almost warrants its own article, but I think just saying that we need to fix them is enough for this post.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is not an exhaustive list, nor are these necessarily the best or even good solutions. The intention I had in posting this is to raise awareness about one of the most common yet unaddressed issues we encounter in day-to-day life.&lt;/p&gt;

&lt;p&gt;A future with self-driving cars and colonies in space is fun to think about, but a future where experiences such as these are resolved is also important. The best thing is, that future can start today.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Apr 2018 16:13:38 +0000</pubDate>
        <link>http://markfischerjr.com//rant/2018/04/08/grocery-stores-are-broken.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//rant/2018/04/08/grocery-stores-are-broken.html</guid>
        
        
        <category>rant</category>
        
      </item>
    
      <item>
        <title>Weird TFS Error Message</title>
        <description>&lt;p&gt;Ran into a fun little bug with the Visual Studio Team Explorer widget today. I clicked “check in” as usual, and was met with this error: “Value was either too large or too small for a UINT32”. Turns out what that error actually means is that one of the files you are attempting to check in is unsaved. &lt;code class=&quot;highlighter-rouge&quot;&gt;File &amp;gt; Save All&lt;/code&gt; and clicking “check in” again fixes this.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//2018/03/21/weird-tfs-error-message.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//2018/03/21/weird-tfs-error-message.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting up  automated testing with MSTest and Selenium</title>
        <description>&lt;p&gt;I’ve started implementing automated testing on a project I’m working on using MSTest and Selenium. I’ve run into several issues that I couldn’t find answers for online so I thought I’d document my findings here.&lt;/p&gt;

&lt;h1 id=&quot;creating-the-test-project&quot;&gt;Creating the test project&lt;/h1&gt;

&lt;p&gt;Create the project using the “Unit Test” template in Visual Studio. As far as I understand the naming convention for test projects is usually &lt;code class=&quot;highlighter-rouge&quot;&gt;ProjectBeingTested.Tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following nuget packages to the project: &lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium.WebDriver&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium.Support&lt;/code&gt;. You will also need to add nuget packages for the browsers you want to test with. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Selenium.Firefox.WebDriver&lt;/code&gt;. For some reason the browser nuget packages are made by a third party and not by the Selenium team, but you need them in order for the tests to run. As far as I can tell this isn’t documented anywhere.&lt;/p&gt;

&lt;h1 id=&quot;getting-the-tests-to-run-in-the-same-browser&quot;&gt;Getting the tests to run in the same browser&lt;/h1&gt;

&lt;p&gt;Most of the examples online show something like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[TestClass]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeControllerTests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePage_WhenSuccessful_PageTitleIsHome&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FirefoxDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoToUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost/MyWebsite/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The issue with this is that each test method will use it’s own browser, meaning that every single test will need to open a new browser, which is slow (around 3 seconds on my machine).&lt;/p&gt;

&lt;p&gt;Instead, the following code can be used to have all tests in the test class use the same browser:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[TestClass]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeControllerTests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ClassInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// initialize the web driver&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FirefoxDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ClassCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// close the web driver&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCleanup&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// delete the cookies. interestingly there was an example for this in the selenium documentation for all supported languages _except_ C#&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// I &amp;lt;3 incomplete documentation&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeleteAllCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePage_WhenSuccessful_PageTitleIsHome&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       	&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoToUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost/MyWebsite/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This logic can be abstracted away into an abstract class which has the added benefit of allowing all test classes in the assembly to use the same browser.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[TestClass]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteDriver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssemblyInitialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FirefoxDriver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssemblyCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCleanup&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Manage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeleteAllCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[TestClass]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeControllerTests&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePage_WhenSuccessful_PageTitleIsHome&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoToUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost/MyWebsite/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;going-forward&quot;&gt;Going forward&lt;/h1&gt;

&lt;p&gt;I’ll be blogging further findings as I get to them, at the moment I’m only about a week into test driven development (or behavior driven development or acceptance driven development or whatever it is we’re doing here). This post has just been about setting up the project structure, I’ll be getting into actual test writing and Continuous Integration using TFS in future posts. I might also add other web drivers or a headless web driver as this develops.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//testing/2018/03/20/automated-testing-with-mstest-and-selenium.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//testing/2018/03/20/automated-testing-with-mstest-and-selenium.html</guid>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Poetry</title>
        <description>&lt;p&gt;Some poetry I’ve written in the past couple months.&lt;/p&gt;

&lt;h1 id=&quot;morning&quot;&gt;Morning&lt;/h1&gt;

&lt;p&gt;Soft and warm&lt;br /&gt;
The golden paths&lt;br /&gt;
And shadows&lt;br /&gt;
On the carpet.&lt;/p&gt;

&lt;p&gt;Quiet footsteps,&lt;br /&gt;
It’s morning&lt;br /&gt;
And the baby’s&lt;br /&gt;
Still asleep.&lt;/p&gt;

&lt;h1 id=&quot;loss&quot;&gt;Loss&lt;/h1&gt;

&lt;p&gt;Milky, fuzzy, sweet and soft&lt;br /&gt;
The odor still remains entombed&lt;br /&gt;
'Til mother lifting up the cloth&lt;br /&gt;
Escapes the scent into the room.&lt;/p&gt;

&lt;p&gt;Nevermore this berth caress&lt;br /&gt;
The child of the morning’s ray&lt;br /&gt;
Forever lonesome by its loss&lt;br /&gt;
Youth is snatched and now decay.&lt;/p&gt;

&lt;h1 id=&quot;fallen&quot;&gt;Fallen&lt;/h1&gt;

&lt;p&gt;The crimson trees have dropped their leaves&lt;br /&gt;
A cool breeze nips his youthful face&lt;br /&gt;
A flock of geese are heading south.&lt;/p&gt;

&lt;p&gt;The year is drawing to a close&lt;br /&gt;
Or is the next beginning now&lt;br /&gt;
When spring will come again?&lt;/p&gt;

&lt;p&gt;His crimson arm has dropped its sword&lt;br /&gt;
A chilled wind bites his mortal wounds&lt;br /&gt;
Alone the vulture flies above.&lt;/p&gt;

&lt;p&gt;His time is drawing to a close&lt;br /&gt;
But soon his next life shall begin&lt;br /&gt;
Where spring will come again.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Feb 2018 22:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//poetry/2018/02/22/poetry.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//poetry/2018/02/22/poetry.html</guid>
        
        
        <category>poetry</category>
        
      </item>
    
      <item>
        <title>Getting started with the HTML5 notification API</title>
        <description>&lt;p&gt;I used the HTML5 notification API for the first time today, it’s actually much more simple than I expected. There are two functions you need to know about:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// to ask for permission&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// to display a notification&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before you actually display the notification, you need to ask for permission, like so:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want to display the notification after giving permission, so we just stick that in a callback:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'granted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’re done! If you want to check that the browser supports the Notification API, you can use the following test:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserSupportsNotifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Notification&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//javascript/2016/08/19/using-the-html5-notification-api.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//javascript/2016/08/19/using-the-html5-notification-api.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Getting neosnippet to work with deoplete</title>
        <description>&lt;p&gt;It took me a bit of searching, but I finally figured out how to get neosnippet to work with deoplete. The issue is that the deoplete auto-complete trigger is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;, which is also the neosnippet expansion trigger. So we want to change the neosnippet trigger to something else, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;. Here are the lines to add to your &lt;code class=&quot;highlighter-rouge&quot;&gt;init.vim&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:deoplete&lt;/span&gt;#enable_at_startup &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_or_jump&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;smap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_or_jump&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
xmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_target&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//vim/2016/08/07/deoplete-and-neosnippet-compat.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//vim/2016/08/07/deoplete-and-neosnippet-compat.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>FSX Review: L-39C Freeware</title>
        <description>&lt;p&gt;I just came across this excellent L-39C this weekend, and I had to share. Interestingly, the only references to it seem to be in a &lt;a href=&quot;http://www.sim-outhouse.com/sohforums/showthread.php?92435-DoughBree-L-39C-%28FSX%29&quot;&gt;forum thread on SimOuthouse&lt;/a&gt;. To my knowledge, this is the first review ever written for it.&lt;/p&gt;

&lt;h1 id=&quot;model&quot;&gt;Model&lt;/h1&gt;

&lt;h2 id=&quot;exterior&quot;&gt;Exterior&lt;/h2&gt;

&lt;p&gt;The exterior model is very detailed, with many extra features such as chocks, remove before flight tags, opening canopy, steps, and icing textures.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-exterior.png&quot; alt=&quot;Picture of the l-39's exterior&quot; /&gt;
&lt;figcaption&gt;The L-39's exterior model. Featuring the &lt;a href=&quot;http://www.sim-outhouse.com/sohforums/showthread.php?94934-L39C-Albatros-Capali-zip&quot;&gt;Hungarian Air Force &quot;red 135&quot; livery&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-exterior-front.png&quot; alt=&quot;Picture of the l-39's exterior&quot; /&gt;
&lt;figcaption&gt;Same plane and livery from the front.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;interior&quot;&gt;Interior&lt;/h2&gt;

&lt;p&gt;The L-39’s virtual cockpit is where it really shines. Practically everything is clickable, and the switches and gauges have been meticulously modelled to look and function like those installed in the real aircraft. The comm radio even has the same quick dial system as on the original. The nav radio has a single frequency display with different modes for the VORs, NDB, and transponder. Lights all work, and the panel lights and cockpit lights are separate. Warning lights are all modelled, make sure you refer to the manual to understand what they mean.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-interior.png&quot; alt=&quot;Picture of the l-39's interior&quot; /&gt;
&lt;figcaption&gt;Shot of the interior showing most of the clickable controls.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;systems&quot;&gt;Systems&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-E&lt;/code&gt; is disabled on this plane, you have to refer to the manual for engine start instructions. There is a damage system included, which keeps track of stress and hours of operation for each main system component. Damage and hours of operation are saved periodically, and restarting the simulator does not remove damage. A damage assessment panel can be accessed with &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift-4&lt;/code&gt;, more details on how to fix components are included in the manual.&lt;/p&gt;

&lt;p&gt;The landing gear, flaps, air brakes, and wheel brakes are powered by the hydraulic system. There are backup levers for each in case the hydraulic pump fails, though they only work once, so in an emergency make sure you are committed to landing before you deploy them.&lt;/p&gt;

&lt;p&gt;The radios, lights, and most gauges are powered by the electrical system. The L-39 has an APU for engine start, and an emergency Ram Air Turbine to keep the systems running if the engine fails. When the Ram Air Turbine arming switch is set to “on”, the RAT will be automatically deployed when either the engine or alternator fail.&lt;/p&gt;

&lt;p&gt;The cabin pressurization is regulated by the Environmental Control System. The system is fully automatic, but if the 115V inverter fails, the ECS will turn off and the “ECS -OFF-“ warning light will illuminate. Also the ECS may have difficulty regulating pressurization during rapid altitude changes. If this is the case, the “CABIN PRESS” light will illuminate to inform you that the cabin pressure is outside of safe operating range. In this case slow your descent/ascent and the cabin pressure should eventually return to normal.&lt;/p&gt;

&lt;p&gt;The cabin heat/cooling switch is modelled and clicking the switch changes its position but doesn’t actually affect any systems.&lt;/p&gt;

&lt;p&gt;Excessive engine exhaust gas tempurature (&amp;gt;685C) will cause damage to the engine over extended periods of time. A chart showing the approximate time to engine failure at various tempuratures is included in the manual.&lt;/p&gt;

&lt;p&gt;As you’ve probably gathered already, reading the manual is highly recommended before flying this aircraft.&lt;/p&gt;

&lt;h1 id=&quot;more-screenshots&quot;&gt;More screenshots&lt;/h1&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-interior-seat.png&quot; alt=&quot;Picture of the l-39's interior&quot; /&gt;
&lt;figcaption&gt;Shot of the interior facing the back of the cockpit.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-interior-panel.png&quot; alt=&quot;Picture of the l-39's interior&quot; /&gt;
&lt;figcaption&gt;Shot of the instrument panel and control stick.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/l39-interior-approach.png&quot; alt=&quot;Picture of the l-39's interior&quot; /&gt;
&lt;figcaption&gt;On approach for runway 25 at KAKR.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;download&quot;&gt;Download&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/0B6K_xiE2GqmMNElNWHpEOTE1UE0/view?usp=sharing&quot;&gt;Download link&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//flight-simulator/fsx/2016/08/01/best-fsx-plane.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//flight-simulator/fsx/2016/08/01/best-fsx-plane.html</guid>
        
        
        <category>flight-simulator</category>
        
        <category>fsx</category>
        
      </item>
    
      <item>
        <title>A thought on Self Documenting Code</title>
        <description>&lt;p&gt;At risk of sounding like I don’t know what I am talking about, I’m writing this post to document something that most programmers have probably known for a long time, even though I only just discovered it.&lt;/p&gt;

&lt;p&gt;Often when programming we may write something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Checks if user is authorized to use shoot()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'soldier'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'police'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;situation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'USA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem with this is that the comment could become out of date when the code is refactored. My thought is that code like this can be refactored to use a variable instead of a comment to document it. For instance:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isAuthorizedToShoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'soldier'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'police'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;situation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'USA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuthorizedToShoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One problem I can see with it is that the variable name might not be updated, just like the comment. My thought is that there would be more incentive to update the variable name since it is actually part of the code, but let me know what you think.&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//programming/2016/03/06/a-thought-on-self-documenting-code.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//programming/2016/03/06/a-thought-on-self-documenting-code.html</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Setting up Linux on a Lenovo X1 Carbon</title>
        <description>&lt;p&gt;I bought a Lenovo X1 Carbon (3rd Generation) to replace my old low-end Toshiba Satellite as my primary development laptop. Overall, I am extremely pleased with the laptop’s build quality and performance. I found the keyboard particularly nice, especially for a chicklet keyboard.&lt;/p&gt;

&lt;h1 id=&quot;disassembly&quot;&gt;Disassembly&lt;/h1&gt;

&lt;p&gt;The X1 version I purchased was came with the i5 processor, WQHD touchscreen, 8GB of RAM, and a 256GB SSD, which I replaced with a Crucial 500GB SSD. Disassembly was very straightforward, there are 7 screws on the bottom which you remove, and the bottom cover comes right off. When reassembling, the bottom cover may not rest flush with the bottom of the laptop before you tighten the screws. Just go ahead and tighten the screws, if you try to press the cover down to make it flush you will only cause issues when trying to tighten the screws. I am documenting this here since none of the tutorials I saw mentioned it.&lt;/p&gt;

&lt;h1 id=&quot;installing-linux&quot;&gt;Installing Linux&lt;/h1&gt;

&lt;p&gt;The Linux distro I chose to install was Ubuntu GNOME, even though I planned on installing Cinnamon. I did this because Mint wouldn’t fit on my 1GB USB drive (vanilla Ubuntu wouldn’t either). I did get a chance to test GNOME 3 with the touch screen though, and the support was very nice, even nicer than Cinnamon’s. I decided to go ahead with installing Cinnamon anyway though, since I didn’t plan on using the touchscreen very much.&lt;/p&gt;

&lt;p&gt;Driver support is excellent, though I never did get the fingerprint reader working 100%. I know the drivers are installed since it now flashes green when I do a sudo command or go to the login screen, but it does nothing when I swipe my finger.&lt;/p&gt;

&lt;h1 id=&quot;installing-the-desktop-environment&quot;&gt;Installing the desktop environment&lt;/h1&gt;

&lt;p&gt;Installing Cinnamon was pretty easy, these three commands did the trick for me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:tsvetko.tsvetkov/cinnamon
$ sudo apt-get update
$ sudo apt-get install cinnamon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although Cinnamon comes with a scaling mode, you can only switch between 1x and 2x GUI scaling. My screen’s DPI isn’t quite high enough for 2x, though it is high enough that at 1x the fonts were too small to read easily. I was able to solve this by changing the font scale to 1.2. The default height for the Cinnamon panel seemed small as well, so I made it taller.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/x1screenshot1.jpg&quot; alt=&quot;Screenshot showing Cinnamon with the numix theme&quot; /&gt;
&lt;figcaption&gt;Cinnamon with Numix&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Battery life on Windows was about 8 hours, and on Linux it was about 5 hours. I was able to increase it to 8 by installing TLP using the &lt;a href=&quot;http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html#installation&quot;&gt;installation instructions on their site&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I found &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu&quot;&gt;this guide&lt;/a&gt; helpful for installing the LAMP stack.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://markfischerjr.com//linux/2016/01/17/linux-on-lenovo-x1-carbon.html</link>
        <guid isPermaLink="true">http://markfischerjr.com//linux/2016/01/17/linux-on-lenovo-x1-carbon.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
